#!/bin/bash
# Copyright (c) 2022 - 2023 askmeaboutloom
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
set -e
cd "$(dirname "$0")/.."

if command -v ninja >/dev/null; then
    GENERATOR='-G Ninja'
fi

preset_debug() {
    cmake -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
          $GENERATOR \
          -B build
}

preset_release() {
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
          -DUSE_ADDRESS_SANITIZER=OFF \
          -DUSE_STRICT_ALIASING=ON \
          -DENABLE_ARCH_NATIVE=ON \
          $GENERATOR \
          -B buildrelease
}

preset_emscripten_debug() {
    cmake -DCMAKE_TOOLCHAIN_FILE="cmake/emscripten.cmake" \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
          -DUSE_GENERATORS=OFF \
          -DUSE_ADDRESS_SANITIZER=OFF \
          -DUSE_CLANG_TIDY=OFF \
          -DLINK_WITH_LIBM=OFF \
          -DBUILD_TESTS=OFF \
          -DCMAKE_C_COMPILER="$(which emcc)" \
          -DCMAKE_C_COMPILER_AR="$(which emar)" \
          -DCMAKE_C_COMPILER_RANLIB="$(which emranlib)" \
          -DCMAKE_CXX_COMPILER="$(which 'em++')" \
          -DCMAKE_CXX_COMPILER_AR="$(which emar)" \
          -DCMAKE_CXX_COMPILER_RANLIB="$(which emranlib)" \
          $GENERATOR \
          -B buildem
}

preset_emscripten_release() {
    cmake -DCMAKE_TOOLCHAIN_FILE="cmake/emscripten.cmake" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
          -DUSE_GENERATORS=OFF \
          -DUSE_ADDRESS_SANITIZER=OFF \
          -DUSE_CLANG_TIDY=OFF \
          -DUSE_STRICT_ALIASING=ON \
          -DLINK_WITH_LIBM=OFF \
          -DBUILD_TESTS=OFF \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
          -DCMAKE_C_COMPILER="$(which emcc)" \
          -DCMAKE_C_COMPILER_AR="$(which emar)" \
          -DCMAKE_C_COMPILER_RANLIB="$(which emranlib)" \
          -DCMAKE_CXX_COMPILER="$(which 'em++')" \
          -DCMAKE_CXX_COMPILER_AR="$(which emar)" \
          -DCMAKE_CXX_COMPILER_RANLIB="$(which emranlib)" \
          $GENERATOR \
          -B buildemrelease
}

preset_drawpile_debug() {
    cmake -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
          -DUSE_ADDRESS_SANITIZER=ON \
          -DBUILD_APPS=OFF \
          -DXML_IMPL=QT \
          -DZIP_IMPL=KARCHIVE \
          $GENERATOR \
          -B builddp
}

preset_drawpile_relwithdebinfo() {
    cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF \
          -DUSE_ADDRESS_SANITIZER=OFF \
          -DUSE_GENERATORS=OFF \
          -DUSE_STRICT_ALIASING=ON \
          -DENABLE_ARCH_NATIVE=ON \
          -DBUILD_APPS=OFF \
          -DXML_IMPL=QT \
          -DZIP_IMPL=KARCHIVE \
          $GENERATOR \
          -B builddprelwithdebinfo
}

preset_drawpile_release() {
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
          -DUSE_ADDRESS_SANITIZER=OFF \
          -DUSE_GENERATORS=OFF \
          -DUSE_STRICT_ALIASING=ON \
          -DENABLE_ARCH_NATIVE=ON \
          -DBUILD_APPS=OFF \
          -DXML_IMPL=QT \
          -DZIP_IMPL=KARCHIVE \
          $GENERATOR \
          -B builddprelease
}

preset_drawpile_qt6_debug() {
    cmake -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
          -DUSE_ADDRESS_SANITIZER=ON \
          -DBUILD_APPS=OFF \
          -DXML_IMPL=QT6 \
          -DZIP_IMPL=LIBZIP \
          $GENERATOR \
          -B builddpqt6
}

preset_drawpile_qt6_relwithdebinfo() {
    cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF \
          -DUSE_ADDRESS_SANITIZER=OFF \
          -DUSE_STRICT_ALIASING=ON \
          -DUSE_GENERATORS=OFF \
          -DENABLE_ARCH_NATIVE=ON \
          -DBUILD_APPS=OFF \
          -DXML_IMPL=QT6 \
          -DZIP_IMPL=LIBZIP \
          $GENERATOR \
          -B builddpqt6relwithdebinfo
}

preset_drawpile_qt6_release() {
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
          -DUSE_ADDRESS_SANITIZER=OFF \
          -DUSE_STRICT_ALIASING=ON \
          -DUSE_GENERATORS=OFF \
          -DENABLE_ARCH_NATIVE=ON \
          -DBUILD_APPS=OFF \
          -DXML_IMPL=QT6 \
          -DZIP_IMPL=LIBZIP \
          $GENERATOR \
          -B builddpqt6release
}

preset_drawpile_android() {
    have_error=0
    if [ -z "$DP_ANDROID_NDK" ]; then
        echo 'Error: DP_ANDROID_NDK environment variable not set.' 1>&2
        echo '       Set it to the path to your NDK root directory.' 1>&2
        have_error=1
    fi
    if [ -z "$DP_ANDROID_PREFIX" ]; then
        echo 'Error: DP_ANDROID_PREFIX environment variable not set.' 1>&2
        echo '       Set it to the CMAKE_PREFIX_PATH you used when' 1>&2
        echo '       building Qt and other dependencies.' 1>&2
        have_error=1
    fi
    # TODO: Figure out the NDK version (major.minor) from the NDK's
    # source.properties and pass it in -DCMAKE_ANDROID_NDK_VERSION. This is
    # required for LTO (-DCMAKE_INTERPROCEDURAL_OPTIMIZATION) to work,
    # otherwise CMake will try to use the LLVM Gold linker, which isn't
    # available since really ancient NDKs. For now, we'll just leave it off.
    # CMake is *supposed* to figure out that version on its own, but it only
    # does it when using the built-in Android support stuff instead of the NDK
    # toolchain file, but trying to use that just gives weird include errors.
    if [ "$have_error" -ne 0 ]; then
        echo 'Errors encountered, bailing out.' 1>&2
        exit 1
    fi
    cmake -DCMAKE_TOOLCHAIN_FILE="$DP_ANDROID_NDK/build/cmake/android.toolchain.cmake" \
          -DCMAKE_FIND_ROOT_PATH="$DP_ANDROID_PREFIX" \
          -DANDROID_PLATFORM=android-31 \
          -DANDROID_ABI=armeabi-v7a \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=OFF \
          -DUSE_ADDRESS_SANITIZER=OFF \
          -DUSE_STRICT_ALIASING=ON \
          -DUSE_GENERATORS=OFF \
          -DENABLE_ARCH_NATIVE=OFF \
          -DBUILD_APPS=OFF \
          -DIMAGE_IMPL=QT6 \
          -DXML_IMPL=QT6 \
          -DZIP_IMPL=LIBZIP \
          $GENERATOR \
          -B buildandroid
}

if [ "$#" -ne 1 ] || [ "$(type -t "preset_$1")" != 'function' ]; then
    echo "Usage: $0 $(perl -ne 'push @p, $1 if /^preset_(\w+)\(/; END { print join "|", @p }' "$BASH_SOURCE")" 1>&2
    exit 2
fi

"preset_$1"
